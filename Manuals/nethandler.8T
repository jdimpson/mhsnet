


Maintenance Procedures                              NETHANDLER(8)



NNNNAAAAMMMMEEEE
     nethandler - general purpose  handler  for  network  message
     delivery

SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
     ____hhhhaaaannnnddddlllleeeerrrrssss////hhhhaaaannnnddddlllleeeerrrr [-_f_l_a_g_s]

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     _N_e_t_h_a_n_d_l_e_r is an optional general  purpose  message  _h_a_n_d_l_e_r
     program  for  network  messages being delivered locally.  It
     will be invoked by the network routing  program  to  deliver
     messages  that  specify  one of the aliases of _n_e_t_h_a_n_d_l_e_r in
     their message header _h_a_n_d_l_e_r field.  See _n_e_t_r_o_u_t_e_r(8).

     _N_e_t_h_a_n_d_l_e_r will collect the data part  of  the  message  and
     invoke a message delivery program to process the data, which
     will be piped into  its  standard  input.   If  the  message
     delivery  program  returns  any exit code other than 0000, then
     the message will be returned to its source,  with  any  data
     written to _s_t_d_e_r_r included as a failure reason.  The message
     delivery program  will  be  invoked  with  several  optional
     flags, and six arguments.  The message delivery program name
     can be specified via the parameter file, (see PARAMS below),
     or  defaults  to  `SPOOLDIR/_lib/name.sh'  where _n_a_m_e is the
     name that _n_e_t_h_a_n_d_l_e_r was invoked under.

     Note that this handler will not process  correctly  messages
     containing  an  FTP  header, and that it expects messages of
     the type generated by the program _n_e_t_m_s_g(8).

     The optional message delivery program flags are:

     ----rrrr  This message has been returned from one of its  original
         destinations.

     ----AAAA_I_D
         This message is an acknowledgment of an earlier message,
         whose unique identifier was ID.

     ----DDDD_s_i_t_e_s
         This message may have been  duplicated  at  any  of  the
         sites  enumerated  in  _s_i_t_e_s.   Each  site's  address is
         terminated with a _s_e_m_i_c_o_l_o_n (`;').

     ----EEEE_r_e_a_s_o_n
         _R_e_a_s_o_n is the  contents  of  the  ERROR  record  in  the
         message  header  environment  field.  Usually associated
         with a returned message.

     ----FFFF_f_l_a_g_s
         Any message header flags for the  handler  specified  at
         the  source,  or added at intermediate sites.  Each flag



SunOS 5.6            Last change: MHSnet 1.3                    1






Maintenance Procedures                              NETHANDLER(8)



         is terminated with a _s_e_m_i_c_o_l_o_n (`;').

     ----IIII_I_D
         This message is the result of an earlier message,  whose
         unique identifier was ID.

     ----WWWW_s_i_t_e_s
         This message has been forwarded  at  all  of  the  sites
         enumerated  in _s_i_t_e_s.  Each site's address is terminated
         with a _s_e_m_i_c_o_l_o_n (`;').

     The message delivery program arguments are (in order):

      1: _h_o_m_e
         The untyped address of the local site.

      2: _t_y_p_e_d__h_o_m_e
         The typed address of the local site.

      3: _s_o_u_r_c_e
         The untyped source address of the message.

      4: _t_y_p_e_d__s_o_u_r_c_e
         The typed source address of the message.

      5: _I_D
         The message ID.

      6: _s_i_z_e
         The size of the data

PPPPAAAARRRRAAAAMMMMEEEETTTTEEEERRRRSSSS
     On starting,  _n_e_t_h_a_n_d_l_e_r  reads  a  file  in  the  `_params'
     directory  with the same name as it was invoked under.  This
     file can contain the following optional parameters:

     HANDLERPROG
         This is the name of the message  delivery  program.   If
         this    parameter   is   undefined,   it   defaults   to
         `SPOOLDIR/_lib/name.sh' where  _n_a_m_e  is  the  name  that
         _n_e_t_h_a_n_d_l_e_r  was  invoked  under.   If  the name does not
         start with a  leading  `/',  then  `SPOOLDIR/'  will  be
         prepended.

EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
     Look at some of the example message delivery  shell  scripts
     for  a  guide  on  how  to  use  the  arguments to deliver a
     message,  eg:   the   remote   queue   status   handler   in
     `SPOOLDIR/_lib/qlooker.sh'.   This requires _n_e_t_h_a_n_d_l_e_r to be
     invoked as `qlooker' which is also the  name  that  must  be
     inserted  in the message's header _h_a_n_d_l_e_r field.  There is a
     program to generate  messages  for  `qlooker'  that  can  be



SunOS 5.6            Last change: MHSnet 1.3                    2






Maintenance Procedures                              NETHANDLER(8)



     examined in `SPOOLDIR/_bin/netrq'.

     To activate a new message handler,  say  `testhandler.sh'  -
     which  you  have  created in `SPOOLDIR/_lib/testhandler.sh',
     link the handler control program to the new name:
       cd _S_P_O_O_L_D_I_R
       ln _handlers/handler _handlers/testhandler

     Then use _n_e_t_m_s_g to generate some messages for  it.   If  you
     also  wish  _n_e_t_m_s_g  to  use  default  parameters for the new
     handler, or you wish to _l_e_g_a_l_i_s_e its use,  then  you  should
     edit the _h_a_n_d_l_e_r_s file appropriately - see _n_e_t_h_a_n_d_l_e_r_s(5).

FFFFIIIILLLLEEEESSSS
     _params/_h_a_n_d_l_e_r  Optional parameters  for  _n_e_t_h_a_n_d_l_e_r  where
                      _h_a_n_d_l_e_r  is the same name as _n_e_t_h_a_n_d_l_e_r was
                      invoked under.

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     _n_e_t_h_a_n_d_l_e_r_s(5),   _n_e_t_p_a_r_a_m_s(5),    _n_e_t_w_o_r_k(7),    _n_e_t_m_s_g(8),
     _n_e_t_r_o_u_t_e_r(8).


































SunOS 5.6            Last change: MHSnet 1.3                    3



