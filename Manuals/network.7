.nr S3 1 \" 1 for ACSnet
.ds S1 NETWORK
.ds S2 Network
.ds S3 network
.ds S4 MHSnet
.ds S5 network
.TH \*(S1 7 "\*(S4 1.27" \^
.nh
.SH NAME
network \- network management details
.SH INTRODUCTION
\*(S4 is a message handling network.
Messages are passed around the network by transport
.I daemons
which provide reliable transmission on the links between nodes.
Messages are routed from node to node by a routing program until
they reach their destinations.
When a message arrives at a destination node,
the routing program passes it to a
.I handler
for delivery.
.PP
The routing program consults a routing file to find the shortest path
to each destination.
The routing file is compiled from network state
information kept in another file,
which is updated from time to time by
.I state
messages broadcast throughout the network whenever the topology changes.
The contents of the
.I statefile
are controlled by a
.I commandsfile
which can be used to override information imported from state messages,
and to configure the details of the local site and its links.
.PP
Most messages are inserted into the network by the user program
.IR netfile (1)
or by the network interface in the mailing system,
but state messages are generated internally by the
.IR netchange (8)
program invoked by the routing program
when it detects a change in topology.
State messages can also be generated by management with the programs
.IR netrequest (8),
and
.IR netreroute (8),
or indirectly by changing significant local site details in the statefile.
This causes the statefile management program
.IR netstate (8)
to invoke
.IR netrequest (8)
to propagate the changes.
.SH DIRECTORIES
All the directories used by the network are in the top-level
directory identified as \s-1SPOOLDIR\s0 during the installation.
Some of them are \fIwork\fP directories,
and are identified by a leading non-alphanumeric character,
usually `\fB_\fP'.
.PP
.if n .ds tw 4
.if t .ds tw \w'\f(CW_messages\fPX'u
.TP "\*(tw"
\f(CW_bad\fP
Contains messages and command files that have been the subject
of an error message to the person identified as \s-1NCC_ADMIN\s0
in the installation process.
These should be processed as soon as possible with the command
.IR netbad (8).
.TP
\f(CW_bin\fP
All the management programs live here,
as well as (links to) the user programs.
The pathname for this directory could be included in the shell
.SM PATH
environment variable for network administrators.
.TP
\f(CW_call\fP
Contains scripts, control programs, and log files for various connection types.
See
.IR netcall (8)
and
.IR netshell (8).
.TP
\f(CW_config\fP
Contains the network configuration program
.if t \f(CWconfigmhs\fP
.if n `configmhs'
and its work files.
See
.IR netconfig (8).
.TP
\f(CW_explain\fP
Contains files used in response to the \fB\-?\fP flag in user programs,
one file for each user program with the same name.
.TP
\f(CW_files\fP
Contains commands describing files awaiting collection by their recipient using
.IR netget (1).
These all carry an expiry date,
and regular invocations of the command
.IR netpurge (8)
will clean out (and return) the uncollected ones.
.TP
\f(CW_forward\fP
Contains one file for each user that has activated message forwarding
that describes forwarding on a per-handler basis.
There may also be entries named after non-\s-1FTP\s0 handlers
which specify a forwarding destination for all messages for that handler.
See
.IR netforward (1).
.TP
\f(CW_handlers\fP
All the message handlers live here.
See
.SM HANDLERS
below.
.TP
\f(CW_lib\fP
Contains management programs, shell scripts and control files.
The log files for
.IR netinit (8)
and the
.I start
shell script also live here.
.TP
\f(CW_messages\fP
Root of a directory tree that has arriving message fragments being collected before delivery.
The fragments are collected in a directory with a name equal to the message \s-1ID\s0,
at the end of a directory path
in which each name is a domain in the typed source address of the message in reverse order.
So a message fragment which is the first of nine
with an \s-1ID\s0 of `\s-1XYZ\s0' from `9=n1.4=cs.3=su.2=oz.0=au'
might be found in a file named
.if n `_messages/0=au/2=oz/3=su/4=cs/9=n1/handler/XYZ/1:9'
.if t \s-2\f(CW_messages/0=au/2=oz/3=su/4=cs/9=n1/handler/XYZ/1:9\fP\s0
(the directory name
.I handler
is specific to a particular handler, spooler or filter program).
Uncollected fragments time-out after a certain period
and are automatically returned to their source by
.IR netpurge (8).
.TP
\f(CW_params\fP
Parameter files for network programs.
Programs look for files in this directory with the same name as they were invoked with.
These files can be edited to change network parameters (see
.IR netparams (5)),
and examined with
.IR netparams (8).
.TP
\f(CW_pending\fP
Command files for messages that are looping and awaiting operator intervention via
.IR netreroute (8).
.TP
\f(CW_reroute\fP
This directory is used as a temporary spooling area for command files for
messages that are in the process of being re-routed.
.TP
\f(CW_route\fP
The directory where the routing program operates.
Messages to be routed are queued here.
\fIRouter\fP creates two files here, `lock' and `log'.
There may be sub-directories created here if you have specified
.I sub-routers
for particular message handlers in the
\f(CWhandlers\fP configuration file.
See
.IR nethandlers (5)
and
.IR netrouter (8).
.TP
\f(CW_state\fP
This directory contains the network state tables.
There are also two directories:
one, \s-1NOTES\s0, contains files with error summaries
from any state messages received that caused problems.
Each file is named after the source of the message,
and is created by the topology-update handler
.if n `stater'.
.if t \f(CWstater\fP.
The other directory, \s-1MSGS\s0, is the root of the
tree based on the reverse ordered typed address of the source of each state message received.
The program
.IR netmap (1)
looks for these files to find out information on particular sites.
These directories are cleaned out periodically by the administration script
.if n `_lib/daily'
.if t \f(CW_lib/daily\fP
run nightly by
.IR netinit ,
but you may choose to speed-up the aging process by editing the script
(it uses
.if n `find\ ...\ -mtime\ +365\ ...'
.if t \f(CWfind\ ...\ -mtime\ +365\ ...\fP
to remove files more than a year old).
.TP
\f(CW_stats\fP
Contains statistics accumulating files,
the main one being the file \fIAccumulated\fP,
which, if it exists,
will accumulate one line for every message processed by the routing program.
.TP
\f(CW_trace\fP
If you turn on tracing for
.IR router ,
various messages will be created here with a time-out of 24 hours.
The directory is cleaned out by the `\-t' flag for
.IR netpurge (8).
.TP
\f(CW_ubin\fP
All the user-visible programs live here.
Each program in this directory should be linked into a user-visible program directory
(such as \f(CW/usr/bin\fP),
otherwise this directory should be included in the path of every user.
.TP
\f(CW_work\fP
This is where all locally generated messages reside while in transit.
.PP
Any other directories are link directories,
with names as specified for each link in
.IR commandsfile .
(If no local name has been specified,
the default directory name is the reverse ordered typed address of the link,
with each domain in the address becoming a directory name.)
They contain files that are special to the transport daemon running the link,
see \fInetdaemon\fP(8).
There will also be three directories for messages travelling over the link:
`cmds' will contain a lock file for the daemon,
together with command files
describing messages awaiting transmission
which will all start with a number (in the range 0-9)
representing the message's priority (0 is highest),
`out' contains the actual data for out-bound messages
(there are usually two or more files per message described in `cmds'),
and `in' contains in-bound messages being received or awaiting routing.
.SH "DAEMON SUPPORT PROGRAMS"
These programs are invoked by the daemons to carry out message control:
.PP
.if n .ds tw 4
.if t .ds tw \w'loophandlerXX'u
.TP "\*(tw"
badhandler
This program is invoked whenever the transport program
finds a command file it can't carry out.
It is also invoked by the routing program
when it can't find a route for a message,
when a handler fails unexpectedly,
or when a message or its
.I commandfile
can't be understood.
The program invoking
.I badhandler
first moves the
.I commandsfile
describing the problem message into the directory `_bad'.
.I Badhandler
then mails a message to the relevant authorities
(as defined in the parameter \s-1NCC_ADMIN\s0).
.TP
loophandler
This program is invoked by the routing program
whenever a message is attempting to traverse a link for the \fIn\fPth time
(controlled by the \fB\-L\fP parameter to
.IR router ).
The message is queued in the directory
.I _pending
and
.I loophandler
invoked to inform management of the problem.
.TP
netchange
Whenever the routing program detects a new link,
it invokes this program.
This program is also run periodically by the
.I netinit
shell script
.if n `_lib/daily'
.if t \f(CW_lib/daily\fP
to check for links that have been idle for long periods.
See
.IR netchange (8).
.TP
netinit
This is the controlling daemon for the network.
It is started at network initialization time to run
all the permanent and periodic network processes.
See
.IR netinit (8).
.TP
router
This is the routing program, see
.IR netrouter (8)
for more details.
It is started by
.I netinit
at network initialization time, and runs continuously,
scanning its message queue directory for messages that need to be routed.
If a filter has been specified for messages on the source link,
\fIrouter\fP first passes the message to the filter for pre-processing.
The filter's exit status determines
what happens to the message \(em see \s-1GATEWAYS\s0 below.
\fIRouter\fP then attempts to deliver the message locally,
if the local site is in the address,
by passing the message to the handler named in its header.
If the handler doesn't exist,
or returns a non-serious error status,
the message is returned to its origin with an explanation.
\fIRouter\fP then calculates the shortest paths
for any further destinations for the message,
and derives a list of links to propagate it on.
If the next link has a filter specified,
the message is passed to the filter for processing,
and, as before, the filter's exit status determines what happens next.
If the link has a special spooler,
the message is passed to it,
otherwise a transport daemon command file is generated for the link,
and queued in the link's command directory.
\fIRouter\fP examines the handlers file on startup,
and starts
.I sub-routers
for any handler that has a non-standard priority
(see
.IR nethandlers (5)).
.SH HANDLERS
These programs each handle a particular type of message.
They all live in the directory \fI_handlers\fP,
which is where \fIrouter\fP expects to find them.
Most of them have their behaviour modified by configuration options
(listed in upper-case below)
specified in a file called \f(CW_params/\fP\fIname\fP,
where
.I name
is the name of the handler
\(em see
.IR netparams (5)
for further details.
There may be other handlers existing at a site,
but the following list covers all the common ones:
.PP
.if n .ds tw 4
.if t .ds tw \w'fileserverXX'u
.TP "\*(tw"
filer
File transfer handler.
The received message is spooled in the directory \fI_files\fP,
and the recipient(s) notified of its arrival.
Fails if any of the recipients doesn't exist,
or the mail program fails.
.TP
fileserver
File request server.
Attempts to return requested files to the origin.
Fails if request is denied, or files are unavailable.
.TP
handler
This is a general purpose handler that passes any data from the message
to a program that can be specified via its
.SM HANDLERPROG
parameter.
See
.IR nethandler (8)
for further details.
.TP
mailer
Mail transfer handler.
The received message is passed to the local mail delivery program.
This program is specified by the configuration parameter
.SM MAILER
and takes the optional arguments specified in
.SM MAILERARGS.
It is also passed an argument for each recipient specified in the mail message.
.I Mailer
fails if
.SM MAILER
fails,
unless the
.SM IGNMAILERSTATUS
option is set to \fB1\fP,
or it is set to \fB2\fP and the exit status was not
.SM EX_NOUSER.
If the
.SM VALIDATEMAIL
option is on,
.I mailer
will fail if any of the recipients doesn't exist in the
.I passwd
file.
.TP
peter
Name server.
The query is looked up in a local people data-base,
and the result passed back in the error status.
.I Peter
invokes the program
.SM WHOISPROG
with the arguments
.SM WHOISARGS,
the pattern from the query,
and the name of the data-base specified by
.SM WHOISFILE,
and passes back any data written to
.IR stdout .
Messages returned from a remote handler
are turned into mail items
which are then mailed back to the original requester.
.TP
printer
Remote printing handler.
Each file from the received message is passed to the local print spooler,
with any extra arguments passed in the message's environment field.
The print spooler is specified by
.SM PRINTER
with additional arguments specified by
.SM PRINTERARGS.
Fails if the print spooler fails,
or if a restricted list of addresses has been specified in
.SM PRINTORIGINS
and the message source doesn't match.
.TP
reporter
News handler.
The news item is passed to the local news service.
The program
.SM NEWSEDITOR
is invoked with the optional parameters specified in
.SM NEWSARGS
and passed the news item on
.IR stdin .
Fails if
.SM NEWSEDITOR
fails,
although errors in news delivery can be ignored be setting
.SM NEWSIGNERR
to \fB1\fP.
.TP
stater
Network topology update handler.
The topology information from the message is piped to the program
.IR netstate (8).
Messages from unwanted sites can be ignored by including their address in
\f(CW_state/ignorefile\fP.
(The name of this file is defined by the value of the
.SM STATERNOTLIST
parameter in
\f(CW_params/stater\fP).
The state message is then linked into a directory hierarchy representing its source address in
.if t \f(CW_state/MSGS\fP.
.if n `_state/MSGS'.
Any warnings or errors from the topology update are preserved in a file
.if t \f(CW_state/NOTES/\fP\fIsite\fP
.if n `_state/NOTES/<site>'
where `site' is the message's source address.
.I Stater
then searches the \fI_reroute\fP directory for
any stalled messages that can now be forwarded.
Fails if \fInetstate\fP fails.
.SS "\fB\s-1Installing your own handlers\s0\fP"
You may install your own handlers in the \fI_handlers\fP directory.
Make sure they are executable by \fIrouter\fP.
Add a line describing the options for each new handler to the file
\f(CW_lib/handlers\fP
(see
.IR nethandlers (5)).
When a message arrives for your handler,
it will be invoked in the same way as the standard ones above.
If it returns a non-zero exit status to \fIrouter\fP,
the message will be returned to its source.
Handlers are invoked in the directory
.SM SPOOLDIR
with the following arguments:
.RS 2
.if n .ds tw 4
.if t .ds tw \w'\fB\-E\fP\fI\ environment\fPXX'u
.TP "\*(tw"
.BI \-b
Present if the destination address is a broadcast type.
.TP
.BI \-D \ datalength
The length of the data in the message (ie: excluding message header).
.TP
.BI \-E \ environment
The environment field from the message header.
Can be processed with the routine \fIGetEnv\fP.
.TP
.BI \-F \ flags
Flags from the message header.
.TP
.BI \-H \ home
The address of the node you are running on.
.TP
.BI \-I \ ID
The ID field from the message header.
.TP
.BI \-L \ link
The address of the link that the message arrived on.
.TP
.BI \-M \ travel-time
The message total travel time.
.TP
.BI \-P \ partno
The message part number from the header.
.TP
.BI \-R \ route
The message route.
.TP
.BI \-S \ source
The source address of the message.
.TP
.BI \-W \ router-pid
Only present if invoked by a `sub-router'.
This is the
.I pid
to signal if the handler inserts a new message into the routing queue.
.RE
.PP
The handler should read commands describing the actual message from standard input.
These commands will be in the format described in the header file
`commandfile.h'.
The best way to introduce a new handler is to write a script to be executed by the
general purpose version
.if t \f(CWhandler\fP.
.if n `handler'.
.SH REROUTING
When directly connected links go down,
the program
.IR netchange (8)
is invoked which attempts to re-route any blocked
messages with simple destination addresses.
If they can't be re-routed,
(the shortest path still lies via the down link),
they are re-spooled in a holding directory called
.if n `_reroute'.
.if t \f(CW_reroute\fP.
The next time the network routing status changes,
the
.if n `_reroute'
.if t \f(CW_reroute\fP
directory will be examined for waiting messages
to see if they can now be released.
This may happen both when a link comes up,
and when a state message is received by the state handler.
.PP
Messages queued for any particular link can be re-routed by
hand should this become necessary \(em use the program
.IR netreroute (8).
.PP
The program
.IR netchange (8)
is run periodically to reroute messages that are stuck on queues
that have been inactive longer than some specifiable time.
It will find links that are \fIdead\fP or \fIdown\fP,
broadcast a state message to that effect,
and attempt to reroute the messages queued on the dead link.
.SH GATEWAYS
Links to other nodes can be treated as gateways to other networks in various ways.
See \fInetstate\fP(1)
for details of the \fIfilter\fP and \fIspooler\fP commands.
.SS "\fB\s-1Link Filters\s0\fP"
You can specify a \fIfilter\fP for any link,
and then any message passing through the link will be processed by the filter.
\fILink filters\fP are the approved way of gathering site or link specific
accounting information, or of dropping messages from interdicted sites.
Filters may modify the body of a message, both by changing the data,
and the size, so they may be used to do data compression/de-compression,
and/or encryption/decryption.
The filter will be invoked for each message
(with working directory set to \s-1SPOOLDIR\s0)
with the following arguments:
.RS 2
.if n .ds tw 4
.if t .ds tw \w'\fB\-N\fP\fI\ directory\fPXX'u
.TP "\*(tw"
.BI \-i " or " \-o
Inbound, or outbound, message.
.TP
.BI \-r
This message is being re-routed.
.TP
.BI \-u
This message is being directed over an
.I advised
link.
.TP
.BI \-H \ home
The address of the node you are running on.
.TP
.BI \-L \ link
The address of the link that the message has just arrived on (\fB\-i\fP),
or is about to depart on (\fB\-o\fP).
.TP
.BI \-N \ directory
The name of the directory for the link that the message has just arrived on (\fB\-i\fP),
or is about to depart on (\fB\-o\fP).
.TP
.BI \-M time
The start time of the message.
.TP
.BI \-X delay
The delay in seconds over the last link for an inbound message.
.RE
.PP
The filter should read commands describing the actual message from standard input.
These commands will be in the format described in the header file
`commandfile.h'.
The filter should process the message,
if necessary write the modified message onto a new file,
write commands describing the new message on standard output,
and then return an exit status to inform the routing program what to do with the message.
If the filter doesn't change the message, then it shouldn't write any commands.
.PP
The exit status of the filter (see \fIInclude/sysexits.h\fP)
is used to control further processing of the message
as follows:
.RS 2
.if n .ds tw 4
.if t .ds tw \w'\s-1EX_DROPMESG\ [105]\s0XX'u
.TP "\*(tw"
.SM "EX_DROPMESG [105]"
The message will be forgotten.
Presumably the message has been processed satisfactorily by the filter,
or the sender has been notified some other way.
.TP
.SM "EX_EXMESG [107]"
The (incoming) message should be routed to further destinations,
but not delivered locally.
Has same effect as
.SM "EX_OK
on out-bound messages.
.TP
.SM "EX_OK [0]"
The message will be processed normally.
.TP
.SM "EX_RETMESG [106]"
The message is returned to its source,
with an explanation culled from the contents of the filter's \fIstderr\fP file.
.RE
.PP
Any other exit status will cause \fIrouter\fP to fail.
.PP
You can install your own \fIfilters\fP,
the easiest way is to supply a shell script that can be invoked by the general purpose filter
described below.
.PP
The following filters are provided:
.PP
.if n .ds tw 4
.if t .ds tw \w'fileserverXX'u
.TP "\*(tw"
filter
This is a general purpose filter program
that defaults to collecting all the parts of a message into one file
and writing statistics
(including any names of sender and recipients)
to the file
\f(CW_stats/\fP\fIlink\fP\f(CW.fltr.log\fP,
where
.I link
is the name of the link that the filter is operating on.
.I Filter
looks for a parameter file with the same name as the one it was invoked under
in which the name of the statistics file
can be changed by the configuration parameter
.SM LOGFILE.
However its main use is as an invoker of management-supplied programs
defined by the parameter
.SM FILTERPROG.
See the manual
.IR netfilter (8)
for further details.
.if \n(S3 \{\
.TP
filter43
This is a filter for converting messages between the old format used in
.SM SUN III
and the new format.
It should be specified for links that are connecting to old sites via the
.SM SUN III
compatible daemons.\}
.SS "\fB\s-1Link Spoolers\s0\fP"
You may also specify a special spooler for an outbound link.
The spooler will be passed the message,
instead of having the message queued on the link in the standard way.
\fILink spoolers\fP are the approved way of spooling messages for links to foreign
networks whose addresses are well enough understood by \*(S4
for \fIrouter\fP to make routing decisions.
If the spooler returns a non-zero exit status,
the message will be returned to its source with the spooler's \fIstderr\fP file
as an explanation.
The spooler will be invoked with the following arguments:
.RS 2
.if n .ds tw 4
.if t .ds tw \w'\fB\-H\fP\fI\ home\fPXX'u
.TP "\*(tw"
.BI \-H \ home
The address of the node you are running on.
.TP
.BI \-L \ link
The address of the link that the message is being passed to.
.TP
.BI \-N \ name
The local (directory) name of the link that the message is being passed to.
.RE
.PP
The spooler should read commands describing the actual message from standard input.
These commands will be in the format described in the header file
`commandfile.h'.
.PP
You can install your own \fIspoolers\fP,
the easiest way is to supply a shell script that can be invoked by the general purpose spooler
described below.
.PP
The following spooler is provided:
.PP
.if n .ds tw 4
.if t .ds tw \w'fileserverXX'u
.TP "\*(tw"
.\" .if \n(S3 \{\
.\" Sun4_3
.\" This spooler interfaces to the previous version of the network,
.\" and should be installed for those links
.\" where the messages are being transported by the old software.
.\" The old software should specify
.\" .if n `Sun3_4'
.\" .if t \f(CWSun3_4\fP
.\" as the spooler in the reverse direction.
.\" Note that it is more efficient to dispense with the old software completely,
.\" and instead to use
.\" .if n `filter43'
.\" .if t \f(CWfilter43\fP
.\" and one of the
.\" .SM SUN III
.\" compatible daemons such as
.\" .if n `NNdaemon'
.\" .if t \f(CWNNdaemon\fP
.\" to interface to the remote node at the `wire' level.
.\" .PP
.\" If you must run them side-by-side,
.\" consider giving the \*(S4 version a new nodename,
.\" and running it as a separate `host' with a `link'
.\" to the old software, preferably via a local
.\" .SM UDP/IP
.\" connection using
.\" .if n `ENdaemon'.
.\" .if t \f(CWENdaemon\fP.
.\" .TP\}
spooler
This is a general purpose spooler program
capable of interfacing to most foreign networks.
It pipes the data from a message into a shell script
that is invoked to pass the data to the foreign network.
A shell script is provided for interfacing with
.SM UUCP
networks called
.if n `UUCP.sh',
.if t \f(CWUUCP.sh\fP,
and there is another for
.SM SMTP
gateways
\(em see
.IR netspooler (8)
for details.
.SH "CALLING REMOTE HOSTS"
Many nodes will be reached via intermittent links
which are set up by \fIcall\fP programs.
The default, \fInetcall\fP(8),
will run user defined call programs installed in the link directory.
See \fInetcall\fP(8) for details on producing call programs.
You may also specify a particular \fIcaller\fP to be invoked directly for a link
with \fInetstate\fP's command `caller'.
The aim is to set up a virtual circuit and start the appropriate transport daemon,
in the same way that \fInetcall\fP operates.
These programs are invoked with arguments as follows:
.RS 2
.if n .ds tw 4
.if t .ds tw \w'\fB\-H\fP\fI\ home\fPX'u
.TP "\*(tw"
.BI \-&
A flag requesting that the program \fIfork\fP and the parent return immediately.
The child should continue and do the work,
so that \fIrouter\fP can process more messages.
.TP
.BI \-H \ home
The address of the node you are running on.
.TP
.BI \-L \ link
The address of the link that is being called.
.TP
.BI \-N \ name
The local (directory) name of the link that is being called.
.RE
.PP
There may be a final argument being the path name of a file \fIcall\fP
if it exists in the \fIname\fP directory.
The program should establish a
.I lock
in `\fIname\fP/cmds/lock' (before returning in the parent)
to prevent multiple invocations by
.IR router .
The exit status is ignored.
.SH "ACCEPTING CALLS"
Some nodes may wish to call you,
in which case arrangements must be made to allow the connections.
The explicit method is to create the link via
.I netstate
and arrange for the connection to be accepted.
If this is via a normal
.I login
then entries must be made in the
.if n `/etc/passwd'
.if t \f(CW/etc/passwd\fP
file as for ordinary users, except that the
.I shell
must be specified to be one of the versions of
.IR netshell (8).
Calls may also be accepted via \s-1TCP/IP\s0, or X.25.
It is strongly recommended that all calls accepted
be protected with a password via
.IR netpasswd (8),
which can control passwords for whole regions of the network,
or for individual sites, as preferred.
.SS "Promiscuous Connections"
It is possible to allow sites from particular regions of the network
which don't have pre-arranged links with your site
to make connections `anonymously' via a single login mechanism,
such as an account called `anonymous' with a suitable network shell.
This is controlled by using the program
.IR netpasswd (8)
to validate the addresses of sites that are allowed to make links anonymously.
The addresses can be broadcast region addresses in which case any site from within
those regions may connect.
See
.IR netshell (8)
for more details.
.SH "ERROR RECOVERY"
An error condition that requires operator intervention
occurs when the \fIstatefile\fP containing the routing data gets corrupted.
This will cause the program \fInetstate\fP to abort with an error
condition and an explanation.
This will in turn cause programs
invoking \fInetstate\fP to abort,
such as \fIstater\fP when receiving a foreign network topology message,
or \fInetchange\fP when invoked by the routing program
to propagate a change of link status.
This last condition will also cause the routing program to terminate with an error
condition, and messages will cease to be routed.
At this point the \fIstatefile\fP must be recovered before the network
will continue to operate.
.PP
The \fIstatefile\fP can be recovered with the command
.RS 2
.ft CW
netstate -esC
.ft
.RE
but in the worst case,
this may remove knowledge of most other sites.
This knowledge will be recovered when the network is started
and the information is imported from each link,
but it will take time.
A
.I backup
copy of the statefile called
.if n `_state/statefile.back'
.if t \f(CW_state/statefile.back\fP
is made periodically by the
.I netinit
administration program
.if n `_lib/daily',
.if t \f(CW_lib/daily\fP,
and this may be copied over the corrupted statefile.
Redundant information is kept in the imported state messages
stored in the
.if n `_files/MSGS'
.if t \f(CW_files/MSGS\fP
directory hierarchy,
and these may may be incorporated into the
.I statefile
by invoking 
.IR netincorp (8).
.PP
The network can also be stalled by resource exhaustion,
such as of spool directory space, or of processes.
This won't cause any errors,
but on the other hand messages may cease to be processed,
and operator intervention may be required to free up resources.
Network processes check periodically that free space on the network file-system
hasn't fallen below the number in the parameter
.SM MINSPOOLFSFREE
(in kilobytes \(em see
.IR netparams (5))
in which case they will pause until more space becomes free again.
.PP
Unexpected errors in messages or handlers cause the routing program
to invoke the program
.I badhandler
to report the problem and clean up.
Should
.I badhandler
itself fail for any reason,
then the routing program will terminate with an error condition.
It will be restarted automatically by
.IR netinit ,
but operator intervention is then necessary
to find the problem and fix it
(if it fails repeatedly).
Look in
\f(CW_route/log\fP
for information on the cause of the problem.
.SH "NETWORK ADMINISTRATOR"
Also known as the
`network super-user',
this is anyone who is a system
`super-user',
or who is a member of the same group that the network operates under
(cf: \s-1NETGROUPNAME\s0),
or who is explicitly given \s-1SU\s0 privilege in the network privileges file
(see
.IR netprivs (5)).
Various programs,
such as
.IR netq (1)
and
.IR netstop (1),
offer special privileges to the network super-user.
.PP
There are two separate addresses used for administration,
these may be either a local login name,
or a set of network mail addresses:
.PP
.if n .ds tw 4
.if t .ds tw \w'\s-1NCC_MANAGER\s0X'u
.TP "\*(tw"
.SM NCC_MANAGER
Notifications of interesting events are mailed to the person (or people) identified as
.SM NCC_MANAGER,
usually `root'.
The definition of `interesting' is controlled by the value of the parameter
.SM NETADMIN:
\fB0\fP \(em nothing is interesting;
\fB1\fP \(em new regions added to the routing tables are notified,
as are links that are marked `dead' for inactivity;
\fB2\fP \(em new regions added to the state message data-base
(but that otherwise don't change the routing tables) are notified,
as are calling sites that have problems connecting.
\fB3\fP \(em links that change state between `up' and `down' are notified.
.TP
.SM NCC_ADMIN
Notifications of problems are mailed to the person (or people) identified as
.SM NCC_ADMIN,
usually `root'.
We strongly recommend that at least one of the addresses specified
is the login name of a real user on the local node
\(em in case the network is inoperable.
.PP
These parameters can be changed at any time \(em see
.IR netparams (5).
.SH "CHANGING YOUR NODE'S ADDRESS"
Changing the address of your node is easy,
but will probably generate a lot of resentment from users who must learn
to use the new address.
However, there are a few features designed to ease the
transition, such as the propagation of an alias for the old name.
.PP
When you change the name,
the next state message broadcast will change it everywhere.
However you first must persuade the managers of the nodes
to which your node is linked explicitly to cooperate.
They must change the name of the link to your node to be the new name.
They should also install an \fIalias\fP for the old name to the new name
(use the `ialias' command to \fInetstate\fP(8)),
although
.IR netstate (8)
will set up automatically an \fIexport alias\fP for the old name of your node,
and this will soon propagate throughout the rest of the network.
Messages travelling on the network addressed to the old name
will then be delivered to the new name.
.SH FILES
Various files are accessed by network programs:
.if n .ds tw 4
.if t .ds tw \w'\f(CW/usr/lib/MHSnetparams\fPX'u
.TP "\*(tw"
\f(CW/usr/lib/MHSnetparams\fP
This is the
.I master
network parameter configuration file,
principally because it allows the name of the network's operating directory
(\s-1SPOOLDIR\s0) to be changed.
(See
.IR netparams (5).)
.TP
\f(CW_call/log\fP
A log of the success/fail status of every call made by
.IR netcall (8).
.TP
\f(CW_call/*shell.log\fP
A log of the success/fail status of every connection processed by a
.IR netshell (8).
.TP
\f(CW_call/passwd\fP
The network passwords file maintained by
.IR netpasswd (8).
.TP
\f(CW_lib/handlers\fP
Handler descriptions.
Contains,
for each handler installed locally,
a description, protocol identifier,
and other options.
(See
.IR nethandlers (5).)
.TP
\f(CW_lib/lock\fP
Lockfile created by
.I netinit
that is interrogated by the connection accepting programs
\(em if it doesn't exist, then connections are not accepted.
.TP
\f(CW_lib/log\fP
The log file maintained by
.I netinit
\(em error conditions are logged here.
.TP
\f(CW_lib/privsfile\fP
User network privileges.
Contains optional privileges for users.
By default,
most users have unrestricted access to the network facilities,
this file can be used to restrict them in particular ways,
or to create new network
.IR super-users .
(See
.IR netprivs (5).)
.TP
\f(CW_params/*\fP
These are all optional network parameter configuration files
defining parameters specific to particular message handlers,
whose names are the same as the files.
(See
.IR netparams (5).)
.TP
\f(CW_route/lock\fP
Lockfile established by
.I netrouter
that is interrogated by the message queueing programs
\(em if it doesn't exist they will notify the user.
.TP
\f(CW_route/log\fP
The log file maintained by
.I netrouter
\(em routing errors are logged here.
.TP
\f(CW_state/commandsfile\fP
Default
.I statefile
control commands.
May be used to override routing information from other nodes.
(See
.IR netstate (8).)
.TP
\f(CW_state/exportfile\fP
This file contains the local region routing information
that is used in replies to sites making explicit enquiries via
.IR netrequest (8).
.TP
\f(CW_state/ignorefile\fP
An optional list of sites whose state messages should be ignored.
The list can be any <white-space> separated set of addresses.
.TP
\f(CW_state/routefile\fP
Routing tables.
The information in this file is binary, and is created by the program
.IR netstate (8).
.TP
\f(CW_state/sitefile\fP
This file contains the local site routing information
that is used in local topology change broadcasts,
or in replies to sites making broadcast requests.
.TP
\f(CW_state/statefile\fP
State information.
This is a binary file maintained by
.IR netstate (8)
and contains details of all known sites and their links.
.TP
\f(CW_state/MSGS/*\fP
The top of a tree of imported state messages arranged according to region.
.TP
\f(CW_stats/Accumulated\fP
Saved statistics.
If this file exists, one line for each message is accumulated here by
.IR router .
(See
.IR netstats (5)
and
.IR netstatspr (8).)
.TP
\f(CW_stats/connect\fP
If this file exists,
it will contain lines written by the virtual circuit daemons
to log transmission statistics.
See
.IR netdaemon (8).
.TP
\fIlink\fP\f(CW/cmds/lock\fP
Lockfile established by a transport daemon running on
.IR link .
.SH "SEE ALSO"
.PD 0
.TP "\w'\fInetforward\fP(8)XX'u"
.IR netaddr (8)
Resolves addresses and shows routes.
.TP
.IR netbad (8)
Manages messages with transmission errors.
.TP
.IR netcall (8)
Describes how to set up a call program.
.TP
.IR netchange (8)
Changes the state of links.
.TP
.IR netcheckdb (8)
Compacts the broadcast message ID data-base.
.TP
.IR netconfig (8)
Network configuration program.
.TP
.IR netcontrol (8)
Communicates with
.IR netinit (8).
.TP
.IR netdaemon (8)
Node-node virtual circuit message transport daemon.
.TP
.IR netdis (1)
Program to provide continuous updates on display terminals.
.TP
.IR netfetch (1)
Requests files from remote sites.
.TP
.IR netfetch (5)
Format of public files availability register.
.TP
.IR netfile (1)
Creates messages using the file transfer protocol,
and queues them for routing by the routing program.
.TP
.IR netfilter (8)
Controls messages to/from links.
.TP
.IR netforward (1)
Manages the forwarding information for handlers.
.TP
.IR nethandler (8)
Delivers messages to various management programs.
.TP
.IR nethandlers (5)
A description of the format of the network
message handlers options file.
.TP
.IR nethandlers (8)
Prints contents of message handlers options file.
.TP
.IR netincorp (8)
Incorporates state messages from
.if n `_state/MSGS'
.if t \f(CW_state/MSGS\fP
into routing tables.
.TP
.IR netinit (8)
Network control daemon.
.TP
.IR netlink (1)
Shows network link statistics.
.TP
.IR netlinkdata (8)
Detailed link statistics.
.TP
.IR netlisten (8)
Performs some of the functions of
.I inetd
where it is not available to accept incoming network IP connections.
.TP
.IR netmail (1)
A mail composition and sending program.
.TP
.IR netmap (1)
Prints network topology details.
.TP
.IR netmsg (8)
Creates messages containing raw data,
and queues them for routing by the routing program.
.TP
.IR netparams (5)
A description of the format of the optional network
parameter configuration files.
.TP
.IR netparams (8)
Prints out network parameter settings.
.TP
.IR netpasswd (5)
Format of network password file.
.TP
.IR netpasswd (8)
Maintains the network password file.
.TP
.IR netpath (8)
Turns network addresses into directory pathnames,
and
.IR vice-versa .
.TP
.IR netprivs (1)
Prints out network privileges.
.TP
.IR netprivs (5)
A description of the format of the optional network
user privileges control file.
.TP
.IR netpurge (8)
Cleans out timed-out messages.
.TP
.IR netq (1)
Shows message queues.
.TP
.IR netrequest (8)
Requests state updates from neighbouring nodes.
.TP
.IR netreroute (8)
Reroutes stalled messages,
and moves messages queues.
.TP
.IR netrl (8)
Interrogate state of links at a remote site.
.TP
.IR netrouter (8)
Routes messages queued for transmission and/or delivery.
.TP
.IR netrq (8)
Interrogate state of queues at a remote site.
.TP
.IR netshell (8)
Program for accepting incoming network connections.
.TP
.IR netspooler (8)
Spools messages for various foreign network gateways.
.TP
.IR netstart (8)
Program for starting the network.
.TP
.IR netstate (8)
Controls the state and routing tables.
.TP
.IR netstats (5)
A description of the format of the optional network
message statistics files.
.TP
.IR netstatspr (8)
Prints selected records from the statistics files.
.TP
.IR netstop (1)
Program for returning or de-queuing network messages.
.TP
.IR netwhois (1)
Requests information about people at remote sites.
.TP
.IR netwindup (8)
Terminates network operations gracefully.
.PD
