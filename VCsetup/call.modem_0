#!/bin/sh

#	Setup circuit to "link" via a `Hayes' type modem.
#	Uses the call scripts in "hayes_[0-4].cs".
#
#	Look in "hayes_2.cs" for modem types supported,
#	and the initialisation strings sent (which you may
#	wish to modify).

USAGE='"Usage: `basename $0` [-3] [-a<daemon_args>] [-c|C] [-d<daemon>] \\
	[-D<script-arg>] [-e] [-f] [-i<initstr>] [-n] [-p] [-Pn] [-q] \\
	[-Qn] [-s] [-S<script>] [-t] [-T<level>] \\
	link modems dialstrings login passwd"'

trap '' 15 # Caught below, to allow termination by `netcontrol'.

PATH=$PATH:/etc:/usr/ucb:/usr/local:/usr/local/bin

Name=$0

andflag="-&"	# "-f" - run in foregound [else background]
cook=		# "-c"/"-C" - cook circuit bytes
daemon=		# "-d<daemon>" - alternate daemon name
dmnargs=	# "-a<args>" - extra args for daemon
fixedspd=false	# "-e" - modem is connected at a fixed speed
initstr=	# "-i" - AT commands for modem setup
longterm=10	# "-s" [300] / "-t" [0] - seconds to idle after last message
myscript=	# "-S<script> - extra call script called after connect, before login
myscriptargs=	# "-D<scriptarg> - arguments for extra call script
noisy=false	# "-n" - noisy lines force smaller packets
packettrace=	# "-Pn"- where 'n' is packet trace level
permanent=false	# "-p" - non-"batch" connection
priority=-Q9	# "-Qn"- where 'n' is max. message priority transmitted
queuecheck=	# "-q" - check queues after call and restart if non-empty
sun3=false	# "-3" - SUN III connection
trace=		# "-Tn"- trace level <n>

for i
do
	case "${i}" in
	-3)	sun3=true				; shift ;;
	-a)	shift; dmnargs="$1"			; shift	;;
	-a*)	dmnargs="`expr "${i}" : '-a\(.*\)'`"	; shift	;;
	-[cC]*)	cook="$i"				; shift ;;
	-d)	shift; daemon="$1"			; shift	;;
	-d*)	daemon="`expr "${i}" : '-d\(.*\)'`"	; shift	;;
	-D)	shift; myscriptargs="$myscriptargs -D$1"; shift	;;
	-D*)	myscriptargs="$myscriptargs $i"		; shift	;;
	-e)	fixedspd=true				; shift	;;
	-f)	andflag=				; shift	;;
	-i)	shift; initstr="$1"			; shift	;;
	-i*)	initstr="`expr "${i}" : '-i\(.*\)'`"	; shift	;;
	-n)	noisy=true				; shift	;;
	-p)	permanent=true				; shift	;;
	-P[0-9])packettrace="$i"			; shift	;;
	-q)	queuecheck=true				; shift	;;
	-Q[0-9])priority="$i"				; shift	;;
	-s)	longterm=300				; shift ;;
	-S)	shift; myscript="$1"			; shift	;;
	-S*)	myscript="`expr "${i}" : '-S\(.*\)'`"	; shift	;;
	-t)	longterm=0				; shift	;;
	-T[0-9])trace="$i"				; shift	;;
	-*)	eval echo "$USAGE"			; exit 1;;
	esac
done

case $# in
5)					;;
*)	eval echo "$USAGE"	; exit 1;;
esac

link=$1
modems=$2	# in form: <type>@<device>[|...]
dialstrings=$3	# in form: <number>@<speed>[|...]
login=$4
passwd=$5

case "$daemon/$sun3" in
/)						;;
VCdaemon/)	daemon=				;;
*/true)		daemon="-Ddmnname=$daemon"	;;
CNdaemon|NNdaemon|PNdaemon)
		daemon="-Ddmnname=$daemon"
		dmnargs="-3 $dmnargs"	# Don't invoke filter43
		;;
esac

case "$cook" in
'')						;;
*)	cook="-Dcook=$cook"			;;
esac

case "$dmnargs" in
'')						;;
*)	dmnargs="-Ddmnargs=$dmnargs"		;;
esac

case "$initstr" in
'')						;;
*)	initstr="-Dinitstr=$initstr"		;;
esac

case "$myscript" in
'')						;;
*)	myscript="-Dmyscript=$myscript"		;;
esac

case "$packettrace" in
'')						;;
*)	packettrace="-Dpackettrace=$packettrace";;
esac

SPOOLDIR=/usr/spool/MHSnet
eval `egrep 'SPOOLDIR' /usr/lib/MHSnetparams 2>/dev/null`

cd $SPOOLDIR
umask 027

case "$link" in
*=*)	node=`expr ${link} : '[^=]*=\([^\.]*\)'`	;;
*)	node=`expr ${link} : '\([^\.]*\)'`		;;
esac
log=_call/${node}.log
olog=_call/${node}.ol

if [ -s ${log} ]
then
	mv ${log} ${olog}
fi

case "${queuecheck}.${permanent}.${andflag}" in
true.false.)
	count=2
	while [ "$count" -gt 1 ]
	do
		_lib/VCcall -v $trace \
		${cook} \
		${daemon} \
		${dmnargs} \
		${initstr} \
		${packettrace} \
		${myscript} \
		${myscriptargs} \
		-D "dialstrings=${dialstrings}" \
		-D "fixedspd=${fixedspd}" \
		-D "loginstr=${login}" \
		-D "longterm=${longterm}" \
		-D "modems=${modems}" \
		-D "noisy=${noisy}" \
		-D "passwdstr=${passwd}" \
		-D "permanent=${permanent}" \
		-D "priority=${priority}" \
		-D "sun3=${sun3}" \
		-S hayes_0.cs \
		-X ${log} \
		${link} &

		child=$!
		trap "kill $child; wait $child; exit $?" 15
		wait $child
		trap "" 15

		netq -cfs ${link} && exit 0
		count=`expr "$count" - 1`
	done
	;;
esac

_lib/VCcall ${andflag} -v $trace \
	${cook} \
	${daemon} \
	${dmnargs} \
	${initstr} \
	${packettrace} \
	${myscript} \
	${myscriptargs} \
	-D "dialstrings=${dialstrings}" \
	-D "fixedspd=${fixedspd}" \
	-D "loginstr=${login}" \
	-D "longterm=${longterm}" \
	-D "modems=${modems}" \
	-D "noisy=${noisy}" \
	-D "passwdstr=${passwd}" \
	-D "permanent=${permanent}" \
	-D "priority=${priority}" \
	-D "sun3=${sun3}" \
	-S hayes_0.cs \
	-X ${log} \
	${link} &

child=$!

case "$andflag" in
'')	;;
*)	exit 0
	;;
esac

trap "kill $child; wait $child; exit $?" 15
wait $child
retval=$?
trap "" 15
case $retval in
0)	exit 0	;;
esac

#	Look for serious errors, and mail NCC_ADMIN.

reason=`tail -1 ${log}`
case "$reason" in
*modem*|*password*|*directory*|*unrecognised*|*MISMATCH*|*SYNC*|*ECHO*)
	;;
*)	exit $retval
	;;
esac

eval `_bin/netparams NCC_ADMIN`
echo "Details from ${SPOOLDIR}/${log}:
$reason

Mail generated by network program \"${Name}\" [$$]" | _bin/netmail -mrt \
	LOGNAME=network \
	NAME="Network Administration" \
	SUBJECT="problem with last call to ${node} (from ${log})" \
	$NCC_ADMIN >/dev/null
